<?php

/**
 * @file
 * Provides a field type which can be used as a hotness metric.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function radioactivity_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the radioactivity module.
    case 'help.page.radioactivity':
      // @todo Add help text.
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Radioactivity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_attachments_alter()
 *
 * @param array &$page
 *   Page array.
 */
function radioactivity_page_attachments_alter(&$page) {
  \Drupal::service('radioactivity.storage')
    ->getConfiguredStorage()
    ->injectSettings($page);
}

/**
 * Implements hook_theme().
 */
function radioactivity_theme() {
  $theme = [];
  return $theme;
}

/**
 * Implements hook_entity_load().
 */
function radioactivity_entity_load($entities, $type) {

  // In order for the field formatters to be rendered we need to make sure
  // the field actually has something in it to trigger the formatters.
  $fields = radioactivity_get_field_names();

  /** @var \Drupal\Core\Entity\FieldableEntityInterface[] $entities */
  foreach ($entities as &$entity) {
    foreach ($fields as $field_name) {
      if (is_a($entity, 'Drupal\Core\Entity\FieldableEntityInterface')
          && $entity->hasField($field_name)) {
        if (!$entity->{$field_name}->energy) {
          $entity->{$field_name}->energy = 0;
          $entity->{$field_name}->timestamp = 0;
        }
      }
    }
  }
}

/**
 * Get a list of Radioactivity field names.
 */
function radioactivity_get_field_names() {

  static $fields;

  if (is_array($fields)) {
    return $fields;
  }

  $fields = [];

  $entity_type_manager = \Drupal::service('entity_type.manager');

  /** @var \Drupal\field\Entity\FieldStorageConfig[] $field_storage_configs */
  if (!$field_storage_configs = $entity_type_manager->getStorage('field_storage_config')->loadByProperties(array('type' => 'radioactivity'))) {
    return $fields;
  }

  foreach ($field_storage_configs as $field_storage) {
    $fields[] = $field_storage->get('field_name');
  }

  return $fields;
}

/**
 * Implements hook_cron().
 */
function radioactivity_cron() {
  $processor = \Drupal::service('radioactivity.processor');
  $processor->processDecay();
  $processor->processEmits();
}
