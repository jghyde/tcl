<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\custom_pub\Entity\CustomPublishingOption;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * @param $form
 * @param FormStateInterface $form_state
 */
function custom_pub_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state) {
  $node_type = $form_state->getBuildInfo()['callback_object']->getEntity();
  $fields = \Drupal::entityManager()->getFieldDefinitions('node', $node_type->id());
  $entities = \Drupal::entityTypeManager()->getStorage('custom_publishing_option')->loadMultiple();

  /**
   * @var  $machine_name
   * @var  CustomPublishingOption $entity
   */
  foreach ($entities as $machine_name => $entity) {
    #$enabled_types = $entity->getNodeTypes();

    #if (in_array($node_type->id(), $enabled_types)) {
      $form['workflow']['options']['#options'][$entity->id()] = t($entity->label());

      if (isset($fields[$entity->id()])) {
        $field_config = $fields[$entity->id()]->getConfig($node_type->id());

        if ($field_config->get('default_value')[0]['value']) {
          $form['workflow']['options']['#default_value'][$entity->id()] = $entity->id();
        }
      }
    #}
  }

  $form['actions']['submit']['#submit'][] = 'custom_pub_node_type_edit_form_submit';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Regroup any custom publishing options to be under a grouped tab on the node form.
 * @param $form
 * @param FormStateInterface $form_state
 */
function custom_pub_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $entities = \Drupal::entityTypeManager()->getStorage('custom_publishing_option')->loadMultiple();
  $form_keys = Element::children($form);
  $user = \Drupal::currentUser();
  $custom_publish_options = false;

  foreach ($entities as $machine_name => $entity) {
    if (in_array($entity->id(), $form_keys)) {
      $form[$entity->id()]['#group'] = 'custom_publish_options';
      $form[$entity->id()]['#access'] = $user->hasPermission('can set node publish state to ' . $entity->id());
      $custom_publish_options = true;
    }
  }

  // show the fieldset if we have options the user can use.
  if ($custom_publish_options) {
    $form['custom_publish_options'] = array(
      '#type' => 'details',
      '#title' => t('Custom Publish Options'),
      '#group' => 'advanced',
      '#attributes' => array(
        'class' => array('node-form-custom-publish-options'),
      ),
      '#weight' => 100,
      '#optional' => TRUE,
    );
  }
}

/**
 * Submit handler for node type forms.
 * @param $form
 * @param FormStateInterface $form_state
 * @see custom_pub_form_node_type_edit_form_alter()
 */
function custom_pub_node_type_edit_form_submit($form, FormStateInterface $form_state) {
  $entities = \Drupal::entityTypeManager()->getStorage('custom_publishing_option')->loadMultiple();
  $values = $form_state->getValues();
  $node_type = $form_state->getBuildInfo()['callback_object']->getEntity();
  $fields = \Drupal::entityManager()->getFieldDefinitions('node', $node_type->id());

  foreach ($entities as $machine_name => $entity) {
    if (in_array($entity->id(), $values['options'])) {
      $value = (bool) $values['options'][$entity->id()];
      $fields[$entity->id()]->getConfig($node_type->id())->setDefaultValue($value)->save();
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 * @param EntityTypeInterface $entity_type
 * @return array
 */
function custom_pub_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $entities = \Drupal::entityTypeManager()->getStorage('custom_publishing_option')->loadMultiple();
    $fields = [];

    foreach ($entities as $machine_name => $entity) {
      $fields[$entity->id()] = BaseFieldDefinition::create('boolean')
        ->setLabel(t('@label', ['@label' => $entity->label()]))
        ->setDescription(t('@description', ['@description' => $entity->getDescription()]))
        ->setRevisionable(TRUE)
        ->setTranslatable(TRUE)
        ->setDefaultValue(0)
        ->setDisplayConfigurable('form', true)
        ->setDisplayOptions('form', array(
          'type' => 'boolean_checkbox',
          'settings' => array(
            'display_label' => TRUE,
          ),
          'weight' => 16,
        )
      );
    }

    return $fields;
  }
}